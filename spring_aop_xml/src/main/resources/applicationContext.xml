<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--  加载jdbc.properties  -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--  AccountDao类交给IOC容器  -->
    <bean id="accountDao" class="com.rg.dao.impl.AccountDaoImpl"/>
    <!--  目标类交给IOC容器  -->
    <bean id="accountService" class="com.rg.service.impl.AccountServiceImpl"/>
    <!--  ConnectionUtils类交给IOC容器  -->
    <bean id="connectionUtils" class="com.rg.utils.ConnectionUtils"/>
    <!--  TransactionManage类交给IOC容器  -->
    <bean id="transactionManage" class="com.rg.utils.TransactionManage"/>

    <!--  dataSource  -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--  queryRunner  -->
    <bean id="queryRunner" class="org.apache.commons.dbutils.QueryRunner">
        <constructor-arg name="ds" ref="dataSource"/>
    </bean>

    <!--  AOP配置  -->
    <aop:config>
        <!--  切点表达式  -->
        <aop:pointcut id="myPointcut" expression="execution(* com.rg.service.impl.AccountServiceImpl.*(..))"/>
        <!--  配置切面：切点+通知  -->
        <aop:aspect ref="transactionManage">
            <aop:before method="beginTransaction" pointcut-ref="myPointcut"/>
            <aop:after-returning method="commit" pointcut-ref="myPointcut"/>
            <aop:after-throwing method="rollback" pointcut-ref="myPointcut"/>
            <aop:after method="release" pointcut-ref="myPointcut"/>
        </aop:aspect>
    </aop:config>

<!--    &lt;!&ndash;  通知类交给IOC容器  &ndash;&gt;-->
<!--    <bean id="myAdvice" class="com.rg.advice.MyAdvice"/>-->

<!--    &lt;!&ndash;-->
<!--      execution([修饰符] 返回值类型 包名.类名.方法名(参数))-->
<!--      execution(public void com.rg.service.impl.AccountServiceImpl.transfer())-->

<!--       - 访问修饰符可以省略-->
<!--       - 返回值类型、包名、类名、方法名可以使用星号 * 代替，代表任意-->
<!--       - 包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类-->
<!--       - 参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表-->

<!--      &ndash;&gt;-->
<!--    &lt;!&ndash;  AOP配置  &ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 抽取的切点表达式 &ndash;&gt;-->
<!--        <aop:pointcut id="myPointcut" expression="execution(* com.rg.service.impl.AccountServiceImpl.*(..))"/>-->

<!--        &lt;!&ndash; 配置切面：切入点+通知 &ndash;&gt;-->
<!--        <aop:aspect ref="myAdvice">-->
<!--&lt;!&ndash;            <aop:before method="before" pointcut-ref="myPointcut"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:after-returning method="afterReturning" pointcut-ref="myPointcut"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:after-throwing method="afterThrowing" pointcut-ref="myPointcut"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:after method="after" pointcut-ref="myPointcut"/>&ndash;&gt;-->
<!--            &lt;!&ndash; 环绕通知 &ndash;&gt;-->
<!--            <aop:around method="around" pointcut-ref="myPointcut"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

</beans>